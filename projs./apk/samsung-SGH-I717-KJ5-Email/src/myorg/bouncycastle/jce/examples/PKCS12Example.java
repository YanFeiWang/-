package myorg.bouncycastle.jce.examples;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.security.spec.RSAPrivateCrtKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.Date;
import java.util.Hashtable;
import java.util.Vector;
import myorg.bouncycastle.asn1.DERBMPString;
import myorg.bouncycastle.asn1.DEREncodable;
import myorg.bouncycastle.asn1.DERObjectIdentifier;
import myorg.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import myorg.bouncycastle.asn1.x509.BasicConstraints;
import myorg.bouncycastle.asn1.x509.X509Extensions;
import myorg.bouncycastle.asn1.x509.X509Name;
import myorg.bouncycastle.jce.PrincipalUtil;
import myorg.bouncycastle.jce.X509Principal;
import myorg.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier;
import myorg.bouncycastle.jce.provider.BouncyCastleProvider;
import myorg.bouncycastle.x509.X509V1CertificateGenerator;
import myorg.bouncycastle.x509.X509V3CertificateGenerator;
import myorg.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure;
import myorg.bouncycastle.x509.extension.SubjectKeyIdentifierStructure;

public class PKCS12Example {

   static char[] passwd = new char[]{(char)null, (char)null, (char)null, (char)null, (char)null, (char)null, (char)null, (char)null, (char)null, (char)null, (char)null};
   static X509V1CertificateGenerator v1CertGen = new X509V1CertificateGenerator();
   static X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator();


   public PKCS12Example() {}

   public static Certificate createCert(PublicKey var0, PrivateKey var1, PublicKey var2) throws Exception {
      Hashtable var3 = new Hashtable();
      Vector var4 = new Vector();
      DERObjectIdentifier var5 = X509Principal.C;
      var3.put(var5, "AU");
      DERObjectIdentifier var7 = X509Principal.O;
      var3.put(var7, "The Legion of the Bouncy Castle");
      DERObjectIdentifier var9 = X509Principal.OU;
      var3.put(var9, "Bouncy Intermediate Certificate");
      DERObjectIdentifier var11 = X509Principal.EmailAddress;
      var3.put(var11, "feedback-crypto@bouncycastle.org");
      DERObjectIdentifier var13 = X509Principal.C;
      var4.addElement(var13);
      DERObjectIdentifier var14 = X509Principal.O;
      var4.addElement(var14);
      DERObjectIdentifier var15 = X509Principal.OU;
      var4.addElement(var15);
      DERObjectIdentifier var16 = X509Principal.EmailAddress;
      var4.addElement(var16);
      Hashtable var17 = new Hashtable();
      Vector var18 = new Vector();
      DERObjectIdentifier var19 = X509Principal.C;
      var17.put(var19, "AU");
      DERObjectIdentifier var21 = X509Principal.O;
      var17.put(var21, "The Legion of the Bouncy Castle");
      DERObjectIdentifier var23 = X509Principal.L;
      var17.put(var23, "Melbourne");
      DERObjectIdentifier var25 = X509Principal.CN;
      var17.put(var25, "Eric H. Echidna");
      DERObjectIdentifier var27 = X509Principal.EmailAddress;
      var17.put(var27, "feedback-crypto@bouncycastle.org");
      DERObjectIdentifier var29 = X509Principal.C;
      var18.addElement(var29);
      DERObjectIdentifier var30 = X509Principal.O;
      var18.addElement(var30);
      DERObjectIdentifier var31 = X509Principal.L;
      var18.addElement(var31);
      DERObjectIdentifier var32 = X509Principal.CN;
      var18.addElement(var32);
      DERObjectIdentifier var33 = X509Principal.EmailAddress;
      var18.addElement(var33);
      v3CertGen.reset();
      X509V3CertificateGenerator var34 = v3CertGen;
      BigInteger var35 = BigInteger.valueOf(3L);
      var34.setSerialNumber(var35);
      X509V3CertificateGenerator var36 = v3CertGen;
      X509Principal var37 = new X509Principal(var4, var3);
      var36.setIssuerDN((X509Name)var37);
      X509V3CertificateGenerator var38 = v3CertGen;
      long var39 = System.currentTimeMillis() - 2592000000L;
      Date var41 = new Date(var39);
      var38.setNotBefore(var41);
      X509V3CertificateGenerator var42 = v3CertGen;
      long var43 = System.currentTimeMillis() + 2592000000L;
      Date var45 = new Date(var43);
      var42.setNotAfter(var45);
      X509V3CertificateGenerator var46 = v3CertGen;
      X509Principal var47 = new X509Principal(var18, var17);
      var46.setSubjectDN((X509Name)var47);
      v3CertGen.setPublicKey(var0);
      v3CertGen.setSignatureAlgorithm("SHA1WithRSAEncryption");
      X509V3CertificateGenerator var48 = v3CertGen;
      DERObjectIdentifier var49 = X509Extensions.SubjectKeyIdentifier;
      SubjectKeyIdentifierStructure var50 = new SubjectKeyIdentifierStructure(var0);
      var48.addExtension(var49, (boolean)0, (DEREncodable)var50);
      X509V3CertificateGenerator var51 = v3CertGen;
      DERObjectIdentifier var52 = X509Extensions.AuthorityKeyIdentifier;
      AuthorityKeyIdentifierStructure var53 = new AuthorityKeyIdentifierStructure(var2);
      var51.addExtension(var52, (boolean)0, (DEREncodable)var53);
      X509Certificate var54 = v3CertGen.generateX509Certificate(var1);
      Date var55 = new Date();
      var54.checkValidity(var55);
      var54.verify(var2);
      PKCS12BagAttributeCarrier var56 = (PKCS12BagAttributeCarrier)var54;
      DERObjectIdentifier var57 = PKCSObjectIdentifiers.pkcs_9_at_friendlyName;
      DERBMPString var58 = new DERBMPString("Eric\'s Key");
      var56.setBagAttribute(var57, var58);
      DERObjectIdentifier var59 = PKCSObjectIdentifiers.pkcs_9_at_localKeyId;
      SubjectKeyIdentifierStructure var60 = new SubjectKeyIdentifierStructure(var0);
      var56.setBagAttribute(var59, var60);
      return var54;
   }

   public static Certificate createIntermediateCert(PublicKey var0, PrivateKey var1, X509Certificate var2) throws Exception {
      Hashtable var3 = new Hashtable();
      Vector var4 = new Vector();
      DERObjectIdentifier var5 = X509Principal.C;
      var3.put(var5, "AU");
      DERObjectIdentifier var7 = X509Principal.O;
      var3.put(var7, "The Legion of the Bouncy Castle");
      DERObjectIdentifier var9 = X509Principal.OU;
      var3.put(var9, "Bouncy Intermediate Certificate");
      DERObjectIdentifier var11 = X509Principal.EmailAddress;
      var3.put(var11, "feedback-crypto@bouncycastle.org");
      DERObjectIdentifier var13 = X509Principal.C;
      var4.addElement(var13);
      DERObjectIdentifier var14 = X509Principal.O;
      var4.addElement(var14);
      DERObjectIdentifier var15 = X509Principal.OU;
      var4.addElement(var15);
      DERObjectIdentifier var16 = X509Principal.EmailAddress;
      var4.addElement(var16);
      v3CertGen.reset();
      X509V3CertificateGenerator var17 = v3CertGen;
      BigInteger var18 = BigInteger.valueOf(2L);
      var17.setSerialNumber(var18);
      X509V3CertificateGenerator var19 = v3CertGen;
      X509Principal var20 = PrincipalUtil.getSubjectX509Principal(var2);
      var19.setIssuerDN((X509Name)var20);
      X509V3CertificateGenerator var21 = v3CertGen;
      long var22 = System.currentTimeMillis() - 2592000000L;
      Date var24 = new Date(var22);
      var21.setNotBefore(var24);
      X509V3CertificateGenerator var25 = v3CertGen;
      long var26 = System.currentTimeMillis() + 2592000000L;
      Date var28 = new Date(var26);
      var25.setNotAfter(var28);
      X509V3CertificateGenerator var29 = v3CertGen;
      X509Principal var30 = new X509Principal(var4, var3);
      var29.setSubjectDN((X509Name)var30);
      v3CertGen.setPublicKey(var0);
      v3CertGen.setSignatureAlgorithm("SHA1WithRSAEncryption");
      X509V3CertificateGenerator var31 = v3CertGen;
      DERObjectIdentifier var32 = X509Extensions.SubjectKeyIdentifier;
      SubjectKeyIdentifierStructure var33 = new SubjectKeyIdentifierStructure(var0);
      var31.addExtension(var32, (boolean)0, (DEREncodable)var33);
      X509V3CertificateGenerator var34 = v3CertGen;
      DERObjectIdentifier var35 = X509Extensions.AuthorityKeyIdentifier;
      AuthorityKeyIdentifierStructure var36 = new AuthorityKeyIdentifierStructure(var2);
      var34.addExtension(var35, (boolean)0, (DEREncodable)var36);
      X509V3CertificateGenerator var37 = v3CertGen;
      DERObjectIdentifier var38 = X509Extensions.BasicConstraints;
      BasicConstraints var39 = new BasicConstraints(0);
      var37.addExtension(var38, (boolean)1, (DEREncodable)var39);
      X509Certificate var40 = v3CertGen.generateX509Certificate(var1);
      Date var41 = new Date();
      var40.checkValidity(var41);
      PublicKey var42 = var2.getPublicKey();
      var40.verify(var42);
      PKCS12BagAttributeCarrier var43 = (PKCS12BagAttributeCarrier)var40;
      DERObjectIdentifier var44 = PKCSObjectIdentifiers.pkcs_9_at_friendlyName;
      DERBMPString var45 = new DERBMPString("Bouncy Intermediate Certificate");
      var43.setBagAttribute(var44, var45);
      return var40;
   }

   public static Certificate createMasterCert(PublicKey var0, PrivateKey var1) throws Exception {
      X509V1CertificateGenerator var2 = v1CertGen;
      BigInteger var3 = BigInteger.valueOf(1L);
      var2.setSerialNumber(var3);
      X509V1CertificateGenerator var4 = v1CertGen;
      X509Principal var5 = new X509Principal("C=AU, O=The Legion of the Bouncy Castle, OU=Bouncy Primary Certificate");
      var4.setIssuerDN((X509Name)var5);
      X509V1CertificateGenerator var6 = v1CertGen;
      long var7 = System.currentTimeMillis() - 2592000000L;
      Date var9 = new Date(var7);
      var6.setNotBefore(var9);
      X509V1CertificateGenerator var10 = v1CertGen;
      long var11 = System.currentTimeMillis() + 2592000000L;
      Date var13 = new Date(var11);
      var10.setNotAfter(var13);
      X509V1CertificateGenerator var14 = v1CertGen;
      X509Principal var15 = new X509Principal("C=AU, O=The Legion of the Bouncy Castle, OU=Bouncy Primary Certificate");
      var14.setSubjectDN((X509Name)var15);
      v1CertGen.setPublicKey(var0);
      v1CertGen.setSignatureAlgorithm("SHA1WithRSAEncryption");
      X509Certificate var16 = v1CertGen.generateX509Certificate(var1);
      Date var17 = new Date();
      var16.checkValidity(var17);
      var16.verify(var0);
      PKCS12BagAttributeCarrier var18 = (PKCS12BagAttributeCarrier)var16;
      DERObjectIdentifier var19 = PKCSObjectIdentifiers.pkcs_9_at_friendlyName;
      DERBMPString var20 = new DERBMPString("Bouncy Primary Certificate");
      var18.setBagAttribute(var19, var20);
      return var16;
   }

   public static void main(String[] var0) throws Exception {
      int var1 = Security.addProvider(new BouncyCastleProvider());
      RSAPublicKeySpec var2 = new RSAPublicKeySpec;
      BigInteger var3 = new BigInteger;
      String var5 = "b4a7e46170574f16a97082b22be58b6a2a629798419be12872a4bdba626cfae9900f76abfb12139dce5de56564fab2b6543165a040c606887420e33d91ed7ed7";
      byte var6 = 16;
      var3.<init>(var5, var6);
      BigInteger var7 = new BigInteger("11", 16);
      var2.<init>(var3, var7);
      BigInteger var11 = new BigInteger;
      String var13 = "b4a7e46170574f16a97082b22be58b6a2a629798419be12872a4bdba626cfae9900f76abfb12139dce5de56564fab2b6543165a040c606887420e33d91ed7ed7";
      byte var14 = 16;
      var11.<init>(var13, var14);
      BigInteger var15 = new BigInteger;
      String var17 = "11";
      byte var18 = 16;
      var15.<init>(var17, var18);
      BigInteger var19 = new BigInteger;
      String var21 = "9f66f6b05410cd503b2709e88115d55daced94d1a34d4e32bf824d0dde6028ae79c5f07b580f5dce240d7111f7ddb130a7945cd7d957d1920994da389f490c89";
      byte var22 = 16;
      var19.<init>(var21, var22);
      BigInteger var23 = new BigInteger;
      String var25 = "c0a0758cdf14256f78d4708c86becdead1b50ad4ad6c5c703e2168fbf37884cb";
      byte var26 = 16;
      var23.<init>(var25, var26);
      BigInteger var27 = new BigInteger;
      String var29 = "f01734d7960ea60070f1b06f2bb81bfac48ff192ae18451d5e56c734a5aab8a5";
      byte var30 = 16;
      var27.<init>(var29, var30);
      BigInteger var31 = new BigInteger;
      String var33 = "b54bb9edff22051d9ee60f9351a48591b6500a319429c069a3e335a1d6171391";
      byte var34 = 16;
      var31.<init>(var33, var34);
      BigInteger var35 = new BigInteger;
      String var37 = "d3d83daf2a0cecd3367ae6f8ae1aeb82e9ac2f816c6fc483533d8297dd7884cd";
      byte var38 = 16;
      var35.<init>(var37, var38);
      BigInteger var39 = new BigInteger;
      String var41 = "b8f52fc6f38593dabb661d3f50f8897f8106eee68b1bce78a95b132b4e5b5d19";
      byte var42 = 16;
      var39.<init>(var41, var42);
      RSAPrivateCrtKeySpec var43 = new RSAPrivateCrtKeySpec(var11, var15, var19, var23, var27, var31, var35, var39);
      RSAPublicKeySpec var44 = new RSAPublicKeySpec;
      BigInteger var45 = new BigInteger;
      String var47 = "8de0d113c5e736969c8d2b047a243f8fe18edad64cde9e842d3669230ca486f7cfdde1f8eec54d1905fff04acc85e61093e180cadc6cea407f193d44bb0e9449b8dbb49784cd9e36260c39e06a947299978c6ed8300724e887198cfede20f3fbde658fa2bd078be946a392bd349f2b49c486e20c405588e306706c9017308e69";
      byte var48 = 16;
      var45.<init>(var47, var48);
      BigInteger var49 = new BigInteger("ffff", 16);
      var44.<init>(var45, var49);
      BigInteger var53 = new BigInteger;
      String var55 = "8de0d113c5e736969c8d2b047a243f8fe18edad64cde9e842d3669230ca486f7cfdde1f8eec54d1905fff04acc85e61093e180cadc6cea407f193d44bb0e9449b8dbb49784cd9e36260c39e06a947299978c6ed8300724e887198cfede20f3fbde658fa2bd078be946a392bd349f2b49c486e20c405588e306706c9017308e69";
      byte var56 = 16;
      var53.<init>(var55, var56);
      BigInteger var57 = new BigInteger;
      String var59 = "ffff";
      byte var60 = 16;
      var57.<init>(var59, var60);
      BigInteger var61 = new BigInteger;
      String var63 = "7deb1b194a85bcfd29cf871411468adbc987650903e3bacc8338c449ca7b32efd39ffc33bc84412fcd7df18d23ce9d7c25ea910b1ae9985373e0273b4dca7f2e0db3b7314056ac67fd277f8f89cf2fd73c34c6ca69f9ba477143d2b0e2445548aa0b4a8473095182631da46844c356f5e5c7522eb54b5a33f11d730ead9c0cff";
      byte var64 = 16;
      var61.<init>(var63, var64);
      BigInteger var65 = new BigInteger;
      String var67 = "ef4cede573cea47f83699b814de4302edb60eefe426c52e17bd7870ec7c6b7a24fe55282ebb73775f369157726fcfb988def2b40350bdca9e5b418340288f649";
      byte var68 = 16;
      var65.<init>(var67, var68);
      BigInteger var69 = new BigInteger;
      String var71 = "97c7737d1b9a0088c3c7b528539247fd2a1593e7e01cef18848755be82f4a45aa093276cb0cbf118cb41117540a78f3fc471ba5d69f0042274defc9161265721";
      byte var72 = 16;
      var69.<init>(var71, var72);
      BigInteger var73 = new BigInteger;
      String var75 = "6c641094e24d172728b8da3c2777e69adfd0839085be7e38c7c4a2dd00b1ae969f2ec9d23e7e37090fcd449a40af0ed463fe1c612d6810d6b4f58b7bfa31eb5f";
      byte var76 = 16;
      var73.<init>(var75, var76);
      BigInteger var77 = new BigInteger;
      String var79 = "70b7123e8e69dfa76feb1236d0a686144b00e9232ed52b73847e74ef3af71fb45ccb24261f40d27f98101e230cf27b977a5d5f1f15f6cf48d5cb1da2a3a3b87f";
      byte var80 = 16;
      var77.<init>(var79, var80);
      BigInteger var81 = new BigInteger;
      String var83 = "e38f5750d97e270996a286df2e653fd26c242106436f5bab0f4c7a9e654ce02665d5a281f2c412456f2d1fa26586ef04a9adac9004ca7f913162cb28e13bf40d";
      byte var84 = 16;
      var81.<init>(var83, var84);
      RSAPrivateCrtKeySpec var85 = new RSAPrivateCrtKeySpec(var53, var57, var61, var65, var69, var73, var77, var81);
      RSAPublicKeySpec var86 = new RSAPublicKeySpec;
      BigInteger var87 = new BigInteger;
      String var89 = "b259d2d6e627a768c94be36164c2d9fc79d97aab9253140e5bf17751197731d6f7540d2509e7b9ffee0a70a6e26d56e92d2edd7f85aba85600b69089f35f6bdbf3c298e05842535d9f064e6b0391cb7d306e0a2d20c4dfb4e7b49a9640bdea26c10ad69c3f05007ce2513cee44cfe01998e62b6c3637d3fc0391079b26ee36d5";
      byte var90 = 16;
      var87.<init>(var89, var90);
      BigInteger var91 = new BigInteger("11", 16);
      var86.<init>(var87, var91);
      BigInteger var95 = new BigInteger;
      String var97 = "b259d2d6e627a768c94be36164c2d9fc79d97aab9253140e5bf17751197731d6f7540d2509e7b9ffee0a70a6e26d56e92d2edd7f85aba85600b69089f35f6bdbf3c298e05842535d9f064e6b0391cb7d306e0a2d20c4dfb4e7b49a9640bdea26c10ad69c3f05007ce2513cee44cfe01998e62b6c3637d3fc0391079b26ee36d5";
      byte var98 = 16;
      var95.<init>(var97, var98);
      BigInteger var99 = new BigInteger;
      String var101 = "11";
      byte var102 = 16;
      var99.<init>(var101, var102);
      BigInteger var103 = new BigInteger;
      String var105 = "92e08f83cc9920746989ca5034dcb384a094fb9c5a6288fcc4304424ab8f56388f72652d8fafc65a4b9020896f2cde297080f2a540e7b7ce5af0b3446e1258d1dd7f245cf54124b4c6e17da21b90a0ebd22605e6f45c9f136d7a13eaac1c0f7487de8bd6d924972408ebb58af71e76fd7b012a8d0e165f3ae2e5077a8648e619";
      byte var106 = 16;
      var103.<init>(var105, var106);
      BigInteger var107 = new BigInteger;
      String var109 = "f75e80839b9b9379f1cf1128f321639757dba514642c206bbbd99f9a4846208b3e93fbbe5e0527cc59b1d4b929d9555853004c7c8b30ee6a213c3d1bb7415d03";
      byte var110 = 16;
      var107.<init>(var109, var110);
      BigInteger var111 = new BigInteger;
      String var113 = "b892d9ebdbfc37e397256dd8a5d3123534d1f03726284743ddc6be3a709edb696fc40c7d902ed804c6eee730eee3d5b20bf6bd8d87a296813c87d3b3cc9d7947";
      byte var114 = 16;
      var111.<init>(var113, var114);
      BigInteger var115 = new BigInteger;
      String var117 = "1d1a2d3ca8e52068b3094d501c9a842fec37f54db16e9a67070a8b3f53cc03d4257ad252a1a640eadd603724d7bf3737914b544ae332eedf4f34436cac25ceb5";
      byte var118 = 16;
      var115.<init>(var117, var118);
      BigInteger var119 = new BigInteger;
      String var121 = "6c929e4e81672fef49d9c825163fec97c4b7ba7acb26c0824638ac22605d7201c94625770984f78a56e6e25904fe7db407099cad9b14588841b94f5ab498dded";
      byte var122 = 16;
      var119.<init>(var121, var122);
      BigInteger var123 = new BigInteger;
      String var125 = "dae7651ee69ad1d081ec5e7188ae126f6004ff39556bde90e0b870962fa7b926d070686d8244fe5a9aa709a95686a104614834b0ada4b10f53197a5cb4c97339";
      byte var126 = 16;
      var123.<init>(var125, var126);
      RSAPrivateCrtKeySpec var127 = new RSAPrivateCrtKeySpec(var95, var99, var103, var107, var111, var115, var119, var123);
      String var128 = "RSA";
      String var129 = "myBC";
      KeyFactory var130 = KeyFactory.getInstance(var128, var129);
      PrivateKey var131 = var130.generatePrivate(var127);
      PublicKey var134 = var130.generatePublic(var86);
      PrivateKey var135 = var130.generatePrivate(var85);
      PublicKey var138 = var130.generatePublic(var44);
      PrivateKey var139 = var130.generatePrivate(var43);
      PublicKey var142 = var130.generatePublic(var2);
      Certificate[] var143 = new Certificate[3];
      Certificate var146 = createMasterCert(var134, var131);
      var143[2] = var146;
      X509Certificate var147 = (X509Certificate)var143[2];
      Certificate var151 = createIntermediateCert(var138, var131, var147);
      var143[1] = var151;
      Certificate var152 = createCert(var142, var135, var138);
      var143[0] = var152;
      PKCS12BagAttributeCarrier var153 = (PKCS12BagAttributeCarrier)var139;
      DERObjectIdentifier var154 = PKCSObjectIdentifiers.pkcs_9_at_friendlyName;
      DERBMPString var155 = new DERBMPString("Eric\'s Key");
      var153.setBagAttribute(var154, var155);
      DERObjectIdentifier var159 = PKCSObjectIdentifiers.pkcs_9_at_localKeyId;
      SubjectKeyIdentifierStructure var160 = new SubjectKeyIdentifierStructure(var142);
      var153.setBagAttribute(var159, var160);
      String var164 = "PKCS12";
      String var165 = "myBC";
      KeyStore var166 = KeyStore.getInstance(var164, var165);
      Object var168 = null;
      Object var169 = null;
      var166.load((InputStream)var168, (char[])var169);
      String var171 = "Eric\'s Key";
      Object var173 = null;
      var166.setKeyEntry(var171, var139, (char[])var173, var143);
      FileOutputStream var175 = new FileOutputStream;
      String var177 = "id.p12";
      var175.<init>(var177);
      char[] var178 = passwd;
      var166.store(var175, var178);
      var175.close();
   }
}
